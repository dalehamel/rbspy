/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [usize; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
impl ::std::fmt::Debug for __atomic_wide_counter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__atomic_wide_counter {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
impl ::std::fmt::Debug for __pthread_cond_s {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "__pthread_cond_s {{ __wseq: {:?}, __g1_start: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __wseq , self . __g1_start , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals)
    }
}
pub type pthread_t = usize;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
impl ::std::fmt::Debug for pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_mutex_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
impl ::std::fmt::Debug for pthread_cond_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_cond_t {{ union }}")
    }
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ccan_list_node {
    pub next: *mut ccan_list_node,
    pub prev: *mut ccan_list_node,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ccan_list_head {
    pub n: ccan_list_node,
}
pub const ruby_id_types_RUBY_ID_STATIC_SYM: ruby_id_types = 1;
pub const ruby_id_types_RUBY_ID_LOCAL: ruby_id_types = 0;
pub const ruby_id_types_RUBY_ID_INSTANCE: ruby_id_types = 2;
pub const ruby_id_types_RUBY_ID_GLOBAL: ruby_id_types = 6;
pub const ruby_id_types_RUBY_ID_ATTRSET: ruby_id_types = 8;
pub const ruby_id_types_RUBY_ID_CONST: ruby_id_types = 10;
pub const ruby_id_types_RUBY_ID_CLASS: ruby_id_types = 12;
pub const ruby_id_types_RUBY_ID_JUNK: ruby_id_types = 14;
pub const ruby_id_types_RUBY_ID_INTERNAL: ruby_id_types = 14;
pub const ruby_id_types_RUBY_ID_SCOPE_SHIFT: ruby_id_types = 4;
pub const ruby_id_types_RUBY_ID_SCOPE_MASK: ruby_id_types = 14;
pub type ruby_id_types = ::std::os::raw::c_uint;
pub const ruby_method_ids_idDot2: ruby_method_ids = 128;
pub const ruby_method_ids_idDot3: ruby_method_ids = 129;
pub const ruby_method_ids_idUPlus: ruby_method_ids = 132;
pub const ruby_method_ids_idUMinus: ruby_method_ids = 133;
pub const ruby_method_ids_idPow: ruby_method_ids = 134;
pub const ruby_method_ids_idCmp: ruby_method_ids = 135;
pub const ruby_method_ids_idPLUS: ruby_method_ids = 43;
pub const ruby_method_ids_idMINUS: ruby_method_ids = 45;
pub const ruby_method_ids_idMULT: ruby_method_ids = 42;
pub const ruby_method_ids_idDIV: ruby_method_ids = 47;
pub const ruby_method_ids_idMOD: ruby_method_ids = 37;
pub const ruby_method_ids_idLTLT: ruby_method_ids = 136;
pub const ruby_method_ids_idGTGT: ruby_method_ids = 137;
pub const ruby_method_ids_idLT: ruby_method_ids = 60;
pub const ruby_method_ids_idLE: ruby_method_ids = 138;
pub const ruby_method_ids_idGT: ruby_method_ids = 62;
pub const ruby_method_ids_idGE: ruby_method_ids = 139;
pub const ruby_method_ids_idEq: ruby_method_ids = 140;
pub const ruby_method_ids_idEqq: ruby_method_ids = 141;
pub const ruby_method_ids_idNeq: ruby_method_ids = 142;
pub const ruby_method_ids_idNot: ruby_method_ids = 33;
pub const ruby_method_ids_idAnd: ruby_method_ids = 38;
pub const ruby_method_ids_idOr: ruby_method_ids = 124;
pub const ruby_method_ids_idBackquote: ruby_method_ids = 96;
pub const ruby_method_ids_idEqTilde: ruby_method_ids = 143;
pub const ruby_method_ids_idNeqTilde: ruby_method_ids = 144;
pub const ruby_method_ids_idAREF: ruby_method_ids = 145;
pub const ruby_method_ids_idASET: ruby_method_ids = 146;
pub const ruby_method_ids_idCOLON2: ruby_method_ids = 147;
pub const ruby_method_ids_idANDOP: ruby_method_ids = 148;
pub const ruby_method_ids_idOROP: ruby_method_ids = 149;
pub const ruby_method_ids_idANDDOT: ruby_method_ids = 150;
pub const ruby_method_ids_tPRESERVED_ID_BEGIN: ruby_method_ids = 150;
pub const ruby_method_ids_idNilP: ruby_method_ids = 151;
pub const ruby_method_ids_idIncludeP: ruby_method_ids = 152;
pub const ruby_method_ids_idNULL: ruby_method_ids = 153;
pub const ruby_method_ids_idEmptyP: ruby_method_ids = 154;
pub const ruby_method_ids_idEqlP: ruby_method_ids = 155;
pub const ruby_method_ids_idRespond_to: ruby_method_ids = 156;
pub const ruby_method_ids_idRespond_to_missing: ruby_method_ids = 157;
pub const ruby_method_ids_idIFUNC: ruby_method_ids = 158;
pub const ruby_method_ids_idCFUNC: ruby_method_ids = 159;
pub const ruby_method_ids_id_core_set_method_alias: ruby_method_ids = 160;
pub const ruby_method_ids_id_core_set_variable_alias: ruby_method_ids = 161;
pub const ruby_method_ids_id_core_undef_method: ruby_method_ids = 162;
pub const ruby_method_ids_id_core_define_method: ruby_method_ids = 163;
pub const ruby_method_ids_id_core_define_singleton_method: ruby_method_ids = 164;
pub const ruby_method_ids_id_core_set_postexe: ruby_method_ids = 165;
pub const ruby_method_ids_id_core_hash_merge_ptr: ruby_method_ids = 166;
pub const ruby_method_ids_id_core_hash_merge_kwd: ruby_method_ids = 167;
pub const ruby_method_ids_id_core_raise: ruby_method_ids = 168;
pub const ruby_method_ids_id_core_sprintf: ruby_method_ids = 169;
pub const ruby_method_ids_id_debug_created_info: ruby_method_ids = 170;
pub const ruby_method_ids_tPRESERVED_ID_END: ruby_method_ids = 171;
pub const ruby_method_ids_tTOKEN_LOCAL_BEGIN: ruby_method_ids = 170;
pub const ruby_method_ids_tMax: ruby_method_ids = 171;
pub const ruby_method_ids_tMin: ruby_method_ids = 172;
pub const ruby_method_ids_tHash: ruby_method_ids = 173;
pub const ruby_method_ids_tFreeze: ruby_method_ids = 174;
pub const ruby_method_ids_tInspect: ruby_method_ids = 175;
pub const ruby_method_ids_tIntern: ruby_method_ids = 176;
pub const ruby_method_ids_tObject_id: ruby_method_ids = 177;
pub const ruby_method_ids_t__id__: ruby_method_ids = 178;
pub const ruby_method_ids_tConst_added: ruby_method_ids = 179;
pub const ruby_method_ids_tConst_missing: ruby_method_ids = 180;
pub const ruby_method_ids_tMethodMissing: ruby_method_ids = 181;
pub const ruby_method_ids_tMethod_added: ruby_method_ids = 182;
pub const ruby_method_ids_tSingleton_method_added: ruby_method_ids = 183;
pub const ruby_method_ids_tMethod_removed: ruby_method_ids = 184;
pub const ruby_method_ids_tSingleton_method_removed: ruby_method_ids = 185;
pub const ruby_method_ids_tMethod_undefined: ruby_method_ids = 186;
pub const ruby_method_ids_tSingleton_method_undefined: ruby_method_ids = 187;
pub const ruby_method_ids_tLength: ruby_method_ids = 188;
pub const ruby_method_ids_tSize: ruby_method_ids = 189;
pub const ruby_method_ids_tGets: ruby_method_ids = 190;
pub const ruby_method_ids_tSucc: ruby_method_ids = 191;
pub const ruby_method_ids_tEach: ruby_method_ids = 192;
pub const ruby_method_ids_tProc: ruby_method_ids = 193;
pub const ruby_method_ids_tLambda: ruby_method_ids = 194;
pub const ruby_method_ids_tSend: ruby_method_ids = 195;
pub const ruby_method_ids_t__send__: ruby_method_ids = 196;
pub const ruby_method_ids_t__recursive_key__: ruby_method_ids = 197;
pub const ruby_method_ids_tInitialize: ruby_method_ids = 198;
pub const ruby_method_ids_tInitialize_copy: ruby_method_ids = 199;
pub const ruby_method_ids_tInitialize_clone: ruby_method_ids = 200;
pub const ruby_method_ids_tInitialize_dup: ruby_method_ids = 201;
pub const ruby_method_ids_tTo_int: ruby_method_ids = 202;
pub const ruby_method_ids_tTo_ary: ruby_method_ids = 203;
pub const ruby_method_ids_tTo_str: ruby_method_ids = 204;
pub const ruby_method_ids_tTo_sym: ruby_method_ids = 205;
pub const ruby_method_ids_tTo_hash: ruby_method_ids = 206;
pub const ruby_method_ids_tTo_proc: ruby_method_ids = 207;
pub const ruby_method_ids_tTo_io: ruby_method_ids = 208;
pub const ruby_method_ids_tTo_a: ruby_method_ids = 209;
pub const ruby_method_ids_tTo_s: ruby_method_ids = 210;
pub const ruby_method_ids_tTo_i: ruby_method_ids = 211;
pub const ruby_method_ids_tTo_f: ruby_method_ids = 212;
pub const ruby_method_ids_tTo_r: ruby_method_ids = 213;
pub const ruby_method_ids_tBt: ruby_method_ids = 214;
pub const ruby_method_ids_tBt_locations: ruby_method_ids = 215;
pub const ruby_method_ids_tCall: ruby_method_ids = 216;
pub const ruby_method_ids_tMesg: ruby_method_ids = 217;
pub const ruby_method_ids_tException: ruby_method_ids = 218;
pub const ruby_method_ids_tLocals: ruby_method_ids = 219;
pub const ruby_method_ids_tNOT: ruby_method_ids = 220;
pub const ruby_method_ids_tAND: ruby_method_ids = 221;
pub const ruby_method_ids_tOR: ruby_method_ids = 222;
pub const ruby_method_ids_tDiv: ruby_method_ids = 223;
pub const ruby_method_ids_tDivmod: ruby_method_ids = 224;
pub const ruby_method_ids_tFdiv: ruby_method_ids = 225;
pub const ruby_method_ids_tQuo: ruby_method_ids = 226;
pub const ruby_method_ids_tName: ruby_method_ids = 227;
pub const ruby_method_ids_tNil: ruby_method_ids = 228;
pub const ruby_method_ids_tPath: ruby_method_ids = 229;
pub const ruby_method_ids_tPack: ruby_method_ids = 230;
pub const ruby_method_ids_tBuffer: ruby_method_ids = 231;
pub const ruby_method_ids_tUScore: ruby_method_ids = 232;
pub const ruby_method_ids_tNUMPARAM_1: ruby_method_ids = 233;
pub const ruby_method_ids_tNUMPARAM_2: ruby_method_ids = 234;
pub const ruby_method_ids_tNUMPARAM_3: ruby_method_ids = 235;
pub const ruby_method_ids_tNUMPARAM_4: ruby_method_ids = 236;
pub const ruby_method_ids_tNUMPARAM_5: ruby_method_ids = 237;
pub const ruby_method_ids_tNUMPARAM_6: ruby_method_ids = 238;
pub const ruby_method_ids_tNUMPARAM_7: ruby_method_ids = 239;
pub const ruby_method_ids_tNUMPARAM_8: ruby_method_ids = 240;
pub const ruby_method_ids_tNUMPARAM_9: ruby_method_ids = 241;
pub const ruby_method_ids_tDefault: ruby_method_ids = 242;
pub const ruby_method_ids_tTOKEN_LOCAL_END: ruby_method_ids = 243;
pub const ruby_method_ids_tTOKEN_INSTANCE_BEGIN: ruby_method_ids = 242;
pub const ruby_method_ids_tTOKEN_INSTANCE_END: ruby_method_ids = 243;
pub const ruby_method_ids_tTOKEN_GLOBAL_BEGIN: ruby_method_ids = 242;
pub const ruby_method_ids_tLASTLINE: ruby_method_ids = 243;
pub const ruby_method_ids_tBACKREF: ruby_method_ids = 244;
pub const ruby_method_ids_tERROR_INFO: ruby_method_ids = 245;
pub const ruby_method_ids_tTOKEN_GLOBAL_END: ruby_method_ids = 246;
pub const ruby_method_ids_tTOKEN_CONST_BEGIN: ruby_method_ids = 245;
pub const ruby_method_ids_tRuby: ruby_method_ids = 246;
pub const ruby_method_ids_tTOKEN_CONST_END: ruby_method_ids = 247;
pub const ruby_method_ids_tTOKEN_CLASS_BEGIN: ruby_method_ids = 246;
pub const ruby_method_ids_tTOKEN_CLASS_END: ruby_method_ids = 247;
pub const ruby_method_ids_tTOKEN_ATTRSET_BEGIN: ruby_method_ids = 246;
pub const ruby_method_ids_tTOKEN_ATTRSET_END: ruby_method_ids = 247;
pub const ruby_method_ids_tNEXT_ID: ruby_method_ids = 247;
pub const ruby_method_ids_idMax: ruby_method_ids = 2737;
pub const ruby_method_ids_idMin: ruby_method_ids = 2753;
pub const ruby_method_ids_idHash: ruby_method_ids = 2769;
pub const ruby_method_ids_idFreeze: ruby_method_ids = 2785;
pub const ruby_method_ids_idInspect: ruby_method_ids = 2801;
pub const ruby_method_ids_idIntern: ruby_method_ids = 2817;
pub const ruby_method_ids_idObject_id: ruby_method_ids = 2833;
pub const ruby_method_ids_id__id__: ruby_method_ids = 2849;
pub const ruby_method_ids_idConst_added: ruby_method_ids = 2865;
pub const ruby_method_ids_idConst_missing: ruby_method_ids = 2881;
pub const ruby_method_ids_idMethodMissing: ruby_method_ids = 2897;
pub const ruby_method_ids_idMethod_added: ruby_method_ids = 2913;
pub const ruby_method_ids_idSingleton_method_added: ruby_method_ids = 2929;
pub const ruby_method_ids_idMethod_removed: ruby_method_ids = 2945;
pub const ruby_method_ids_idSingleton_method_removed: ruby_method_ids = 2961;
pub const ruby_method_ids_idMethod_undefined: ruby_method_ids = 2977;
pub const ruby_method_ids_idSingleton_method_undefined: ruby_method_ids = 2993;
pub const ruby_method_ids_idLength: ruby_method_ids = 3009;
pub const ruby_method_ids_idSize: ruby_method_ids = 3025;
pub const ruby_method_ids_idGets: ruby_method_ids = 3041;
pub const ruby_method_ids_idSucc: ruby_method_ids = 3057;
pub const ruby_method_ids_idEach: ruby_method_ids = 3073;
pub const ruby_method_ids_idProc: ruby_method_ids = 3089;
pub const ruby_method_ids_idLambda: ruby_method_ids = 3105;
pub const ruby_method_ids_idSend: ruby_method_ids = 3121;
pub const ruby_method_ids_id__send__: ruby_method_ids = 3137;
pub const ruby_method_ids_id__recursive_key__: ruby_method_ids = 3153;
pub const ruby_method_ids_idInitialize: ruby_method_ids = 3169;
pub const ruby_method_ids_idInitialize_copy: ruby_method_ids = 3185;
pub const ruby_method_ids_idInitialize_clone: ruby_method_ids = 3201;
pub const ruby_method_ids_idInitialize_dup: ruby_method_ids = 3217;
pub const ruby_method_ids_idTo_int: ruby_method_ids = 3233;
pub const ruby_method_ids_idTo_ary: ruby_method_ids = 3249;
pub const ruby_method_ids_idTo_str: ruby_method_ids = 3265;
pub const ruby_method_ids_idTo_sym: ruby_method_ids = 3281;
pub const ruby_method_ids_idTo_hash: ruby_method_ids = 3297;
pub const ruby_method_ids_idTo_proc: ruby_method_ids = 3313;
pub const ruby_method_ids_idTo_io: ruby_method_ids = 3329;
pub const ruby_method_ids_idTo_a: ruby_method_ids = 3345;
pub const ruby_method_ids_idTo_s: ruby_method_ids = 3361;
pub const ruby_method_ids_idTo_i: ruby_method_ids = 3377;
pub const ruby_method_ids_idTo_f: ruby_method_ids = 3393;
pub const ruby_method_ids_idTo_r: ruby_method_ids = 3409;
pub const ruby_method_ids_idBt: ruby_method_ids = 3425;
pub const ruby_method_ids_idBt_locations: ruby_method_ids = 3441;
pub const ruby_method_ids_idCall: ruby_method_ids = 3457;
pub const ruby_method_ids_idMesg: ruby_method_ids = 3473;
pub const ruby_method_ids_idException: ruby_method_ids = 3489;
pub const ruby_method_ids_idLocals: ruby_method_ids = 3505;
pub const ruby_method_ids_idNOT: ruby_method_ids = 3521;
pub const ruby_method_ids_idAND: ruby_method_ids = 3537;
pub const ruby_method_ids_idOR: ruby_method_ids = 3553;
pub const ruby_method_ids_idDiv: ruby_method_ids = 3569;
pub const ruby_method_ids_idDivmod: ruby_method_ids = 3585;
pub const ruby_method_ids_idFdiv: ruby_method_ids = 3601;
pub const ruby_method_ids_idQuo: ruby_method_ids = 3617;
pub const ruby_method_ids_idName: ruby_method_ids = 3633;
pub const ruby_method_ids_idNil: ruby_method_ids = 3649;
pub const ruby_method_ids_idPath: ruby_method_ids = 3665;
pub const ruby_method_ids_idPack: ruby_method_ids = 3681;
pub const ruby_method_ids_idBuffer: ruby_method_ids = 3697;
pub const ruby_method_ids_idUScore: ruby_method_ids = 3713;
pub const ruby_method_ids_idNUMPARAM_1: ruby_method_ids = 3729;
pub const ruby_method_ids_idNUMPARAM_2: ruby_method_ids = 3745;
pub const ruby_method_ids_idNUMPARAM_3: ruby_method_ids = 3761;
pub const ruby_method_ids_idNUMPARAM_4: ruby_method_ids = 3777;
pub const ruby_method_ids_idNUMPARAM_5: ruby_method_ids = 3793;
pub const ruby_method_ids_idNUMPARAM_6: ruby_method_ids = 3809;
pub const ruby_method_ids_idNUMPARAM_7: ruby_method_ids = 3825;
pub const ruby_method_ids_idNUMPARAM_8: ruby_method_ids = 3841;
pub const ruby_method_ids_idNUMPARAM_9: ruby_method_ids = 3857;
pub const ruby_method_ids_idDefault: ruby_method_ids = 3873;
pub const ruby_method_ids_idLASTLINE: ruby_method_ids = 3895;
pub const ruby_method_ids_idBACKREF: ruby_method_ids = 3911;
pub const ruby_method_ids_idERROR_INFO: ruby_method_ids = 3927;
pub const ruby_method_ids_idRuby: ruby_method_ids = 3947;
pub const ruby_method_ids_tLAST_OP_ID: ruby_method_ids = 170;
pub const ruby_method_ids_idLAST_OP_ID: ruby_method_ids = 10;
pub type ruby_method_ids = ::std::os::raw::c_uint;
pub type VALUE = usize;
pub type ID = usize;
pub type rb_alloc_func_t = ::std::option::Option<unsafe extern "C" fn(klass: VALUE) -> VALUE>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBasic {
    pub flags: VALUE,
    pub klass: VALUE,
}
pub const ruby_fl_ushift_RUBY_FL_USHIFT: ruby_fl_ushift = 12;
pub type ruby_fl_ushift = ::std::os::raw::c_uint;
pub const ruby_fl_type_RUBY_FL_WB_PROTECTED: ruby_fl_type = 32;
pub const ruby_fl_type_RUBY_FL_PROMOTED: ruby_fl_type = 32;
pub const ruby_fl_type_RUBY_FL_UNUSED6: ruby_fl_type = 64;
pub const ruby_fl_type_RUBY_FL_FINALIZE: ruby_fl_type = 128;
pub const ruby_fl_type_RUBY_FL_TAINT: ruby_fl_type = 0;
pub const ruby_fl_type_RUBY_FL_SHAREABLE: ruby_fl_type = 256;
pub const ruby_fl_type_RUBY_FL_UNTRUSTED: ruby_fl_type = 0;
pub const ruby_fl_type_RUBY_FL_SEEN_OBJ_ID: ruby_fl_type = 512;
pub const ruby_fl_type_RUBY_FL_EXIVAR: ruby_fl_type = 1024;
pub const ruby_fl_type_RUBY_FL_FREEZE: ruby_fl_type = 2048;
pub const ruby_fl_type_RUBY_FL_USER0: ruby_fl_type = 4096;
pub const ruby_fl_type_RUBY_FL_USER1: ruby_fl_type = 8192;
pub const ruby_fl_type_RUBY_FL_USER2: ruby_fl_type = 16384;
pub const ruby_fl_type_RUBY_FL_USER3: ruby_fl_type = 32768;
pub const ruby_fl_type_RUBY_FL_USER4: ruby_fl_type = 65536;
pub const ruby_fl_type_RUBY_FL_USER5: ruby_fl_type = 131072;
pub const ruby_fl_type_RUBY_FL_USER6: ruby_fl_type = 262144;
pub const ruby_fl_type_RUBY_FL_USER7: ruby_fl_type = 524288;
pub const ruby_fl_type_RUBY_FL_USER8: ruby_fl_type = 1048576;
pub const ruby_fl_type_RUBY_FL_USER9: ruby_fl_type = 2097152;
pub const ruby_fl_type_RUBY_FL_USER10: ruby_fl_type = 4194304;
pub const ruby_fl_type_RUBY_FL_USER11: ruby_fl_type = 8388608;
pub const ruby_fl_type_RUBY_FL_USER12: ruby_fl_type = 16777216;
pub const ruby_fl_type_RUBY_FL_USER13: ruby_fl_type = 33554432;
pub const ruby_fl_type_RUBY_FL_USER14: ruby_fl_type = 67108864;
pub const ruby_fl_type_RUBY_FL_USER15: ruby_fl_type = 134217728;
pub const ruby_fl_type_RUBY_FL_USER16: ruby_fl_type = 268435456;
pub const ruby_fl_type_RUBY_FL_USER17: ruby_fl_type = 536870912;
pub const ruby_fl_type_RUBY_FL_USER18: ruby_fl_type = 1073741824;
pub const ruby_fl_type_RUBY_FL_USER19: ruby_fl_type = -2147483648;
pub const ruby_fl_type_RUBY_ELTS_SHARED: ruby_fl_type = 4096;
pub const ruby_fl_type_RUBY_FL_SINGLETON: ruby_fl_type = 8192;
pub type ruby_fl_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString {
    pub basic: RBasic,
    pub len: ::std::os::raw::c_long,
    pub as_: RString__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1 {
    pub heap: RString__bindgen_ty_1__bindgen_ty_1,
    pub embed: RString__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString__bindgen_ty_1__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_char,
    pub aux: RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: ::std::os::raw::c_long,
    pub shared: VALUE,
}
impl ::std::fmt::Debug for RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {{ union }}"
        )
    }
}
impl ::std::fmt::Debug for RString__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString__bindgen_ty_1__bindgen_ty_1 {{ ptr: {:?}, aux: {:?} }}",
            self.ptr, self.aux
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RString__bindgen_ty_1__bindgen_ty_2 {
    pub ary: [::std::os::raw::c_char; 1usize],
}
impl ::std::fmt::Debug for RString__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RString__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for RString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString {{ basic: {:?}, len: {:?}, as: {:?} }}",
            self.basic, self.len, self.as_
        )
    }
}
pub type st_data_t = usize;
pub type st_index_t = st_data_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_hash_type {
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(arg1: st_data_t, arg2: st_data_t) -> ::std::os::raw::c_int,
    >,
    pub hash: ::std::option::Option<unsafe extern "C" fn(arg1: st_data_t) -> st_index_t>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_table_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_table {
    pub entry_power: ::std::os::raw::c_uchar,
    pub bin_power: ::std::os::raw::c_uchar,
    pub size_ind: ::std::os::raw::c_uchar,
    pub rebuilds_num: ::std::os::raw::c_uint,
    pub type_: *const st_hash_type,
    pub num_entries: st_index_t,
    pub bins: *mut st_index_t,
    pub entries_start: st_index_t,
    pub entries_bound: st_index_t,
    pub entries: *mut st_table_entry,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray {
    pub basic: RBasic,
    pub as_: RArray__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1 {
    pub heap: RArray__bindgen_ty_1__bindgen_ty_1,
    pub ary: [VALUE; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray__bindgen_ty_1__bindgen_ty_1 {
    pub len: ::std::os::raw::c_long,
    pub aux: RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *const VALUE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: ::std::os::raw::c_long,
    pub shared_root: VALUE,
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {{ union }}"
        )
    }
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray__bindgen_ty_1__bindgen_ty_1 {{ len: {:?}, aux: {:?}, ptr: {:?} }}",
            self.len, self.aux, self.ptr
        )
    }
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RArray__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for RArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray {{ basic: {:?}, as: {:?} }}",
            self.basic, self.as_
        )
    }
}
pub type rb_event_flag_t = u32;
pub type rb_unblock_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type rb_serial_t = ::std::os::raw::c_ulonglong;
pub const method_missing_reason_MISSING_NOENTRY: method_missing_reason = 0;
pub const method_missing_reason_MISSING_PRIVATE: method_missing_reason = 1;
pub const method_missing_reason_MISSING_PROTECTED: method_missing_reason = 2;
pub const method_missing_reason_MISSING_FCALL: method_missing_reason = 4;
pub const method_missing_reason_MISSING_VCALL: method_missing_reason = 8;
pub const method_missing_reason_MISSING_SUPER: method_missing_reason = 16;
pub const method_missing_reason_MISSING_MISSING: method_missing_reason = 32;
pub const method_missing_reason_MISSING_NONE: method_missing_reason = 64;
pub type method_missing_reason = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_callcache {
    _unused: [u8; 0],
}
pub const imemo_type_imemo_env: imemo_type = 0;
pub const imemo_type_imemo_cref: imemo_type = 1;
pub const imemo_type_imemo_svar: imemo_type = 2;
pub const imemo_type_imemo_throw_data: imemo_type = 3;
pub const imemo_type_imemo_ifunc: imemo_type = 4;
pub const imemo_type_imemo_memo: imemo_type = 5;
pub const imemo_type_imemo_ment: imemo_type = 6;
pub const imemo_type_imemo_iseq: imemo_type = 7;
pub const imemo_type_imemo_tmpbuf: imemo_type = 8;
pub const imemo_type_imemo_ast: imemo_type = 9;
pub const imemo_type_imemo_parser_strterm: imemo_type = 10;
pub const imemo_type_imemo_callinfo: imemo_type = 11;
pub const imemo_type_imemo_callcache: imemo_type = 12;
pub const imemo_type_imemo_constcache: imemo_type = 13;
pub type imemo_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_svar {
    pub flags: VALUE,
    pub cref_or_me: VALUE,
    pub lastline: VALUE,
    pub backref: VALUE,
    pub others: VALUE,
}
pub const rb_method_visibility_t_METHOD_VISI_UNDEF: rb_method_visibility_t = 0;
pub const rb_method_visibility_t_METHOD_VISI_PUBLIC: rb_method_visibility_t = 1;
pub const rb_method_visibility_t_METHOD_VISI_PRIVATE: rb_method_visibility_t = 2;
pub const rb_method_visibility_t_METHOD_VISI_PROTECTED: rb_method_visibility_t = 3;
pub const rb_method_visibility_t_METHOD_VISI_MASK: rb_method_visibility_t = 3;
pub type rb_method_visibility_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct rb_scope_visi_struct {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl rb_scope_visi_struct {
    #[inline]
    pub fn method_visi(&self) -> rb_method_visibility_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_method_visi(&mut self, val: rb_method_visibility_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn method_visi_raw(this: *const Self) -> rb_method_visibility_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_method_visi_raw(this: *mut Self, val: rb_method_visibility_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn module_func(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_module_func(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn module_func_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_module_func_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        method_visi: rb_method_visibility_t,
        module_func: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let method_visi: u32 = unsafe { ::std::mem::transmute(method_visi) };
            method_visi as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let module_func: u32 = unsafe { ::std::mem::transmute(module_func) };
            module_func as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type rb_scope_visibility_t = rb_scope_visi_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_cref_struct {
    pub flags: VALUE,
    pub refinements: VALUE,
    pub klass_or_self: VALUE,
    pub next: *mut rb_cref_struct,
    pub scope_visi: rb_scope_visibility_t,
}
pub type rb_cref_t = rb_cref_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_entry_struct {
    pub flags: VALUE,
    pub defined_class: VALUE,
    pub def: *mut rb_method_definition_struct,
    pub called_id: ID,
    pub owner: VALUE,
}
pub const rb_method_type_t_VM_METHOD_TYPE_ISEQ: rb_method_type_t = 0;
pub const rb_method_type_t_VM_METHOD_TYPE_CFUNC: rb_method_type_t = 1;
pub const rb_method_type_t_VM_METHOD_TYPE_ATTRSET: rb_method_type_t = 2;
pub const rb_method_type_t_VM_METHOD_TYPE_IVAR: rb_method_type_t = 3;
pub const rb_method_type_t_VM_METHOD_TYPE_BMETHOD: rb_method_type_t = 4;
pub const rb_method_type_t_VM_METHOD_TYPE_ZSUPER: rb_method_type_t = 5;
pub const rb_method_type_t_VM_METHOD_TYPE_ALIAS: rb_method_type_t = 6;
pub const rb_method_type_t_VM_METHOD_TYPE_UNDEF: rb_method_type_t = 7;
pub const rb_method_type_t_VM_METHOD_TYPE_NOTIMPLEMENTED: rb_method_type_t = 8;
pub const rb_method_type_t_VM_METHOD_TYPE_OPTIMIZED: rb_method_type_t = 9;
pub const rb_method_type_t_VM_METHOD_TYPE_MISSING: rb_method_type_t = 10;
pub const rb_method_type_t_VM_METHOD_TYPE_REFINED: rb_method_type_t = 11;
pub type rb_method_type_t = ::std::os::raw::c_uint;
pub type rb_iseq_t = rb_iseq_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_iseq_struct {
    pub iseqptr: *const rb_iseq_t,
    pub cref: *mut rb_cref_t,
}
pub type rb_method_iseq_t = rb_method_iseq_struct;
pub type rb_cfunc_t = ::std::option::Option<unsafe extern "C" fn() -> VALUE>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_cfunc_struct {
    pub func: rb_cfunc_t,
    pub invoker: ::std::option::Option<
        unsafe extern "C" fn(
            recv: VALUE,
            argc: ::std::os::raw::c_int,
            argv: *const VALUE,
            func: ::std::option::Option<unsafe extern "C" fn() -> VALUE>,
        ) -> VALUE,
    >,
    pub argc: ::std::os::raw::c_int,
}
pub type rb_method_cfunc_t = rb_method_cfunc_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_attr_struct {
    pub id: ID,
    pub location: VALUE,
}
pub type rb_method_attr_t = rb_method_attr_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_alias_struct {
    pub original_me: *mut rb_method_entry_struct,
}
pub type rb_method_alias_t = rb_method_alias_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_refined_struct {
    pub orig_me: *mut rb_method_entry_struct,
}
pub type rb_method_refined_t = rb_method_refined_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_bmethod_struct {
    pub proc_: VALUE,
    pub hooks: *mut rb_hook_list_struct,
    pub defined_ractor: VALUE,
}
pub type rb_method_bmethod_t = rb_method_bmethod_struct;
pub const method_optimized_type_OPTIMIZED_METHOD_TYPE_SEND: method_optimized_type = 0;
pub const method_optimized_type_OPTIMIZED_METHOD_TYPE_CALL: method_optimized_type = 1;
pub const method_optimized_type_OPTIMIZED_METHOD_TYPE_BLOCK_CALL: method_optimized_type = 2;
pub const method_optimized_type_OPTIMIZED_METHOD_TYPE_STRUCT_AREF: method_optimized_type = 3;
pub const method_optimized_type_OPTIMIZED_METHOD_TYPE_STRUCT_ASET: method_optimized_type = 4;
pub const method_optimized_type_OPTIMIZED_METHOD_TYPE__MAX: method_optimized_type = 5;
pub type method_optimized_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_optimized {
    pub type_: method_optimized_type,
    pub index: ::std::os::raw::c_uint,
}
pub type rb_method_optimized_t = rb_method_optimized;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_method_definition_struct {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub body: rb_method_definition_struct__bindgen_ty_1,
    pub original_id: ID,
    pub method_serial: usize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_method_definition_struct__bindgen_ty_1 {
    pub iseq: rb_method_iseq_t,
    pub cfunc: rb_method_cfunc_t,
    pub attr: rb_method_attr_t,
    pub alias: rb_method_alias_t,
    pub refined: rb_method_refined_t,
    pub bmethod: rb_method_bmethod_t,
    pub optimized: rb_method_optimized_t,
}
impl ::std::fmt::Debug for rb_method_definition_struct__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_method_definition_struct__bindgen_ty_1 {{ union }}")
    }
}
impl rb_method_definition_struct {
    #[inline]
    pub fn type_(&self) -> rb_method_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: rb_method_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> rb_method_type_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: rb_method_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn iseq_overload(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_iseq_overload(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn iseq_overload_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_iseq_overload_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn no_redef_warning(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_redef_warning(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn no_redef_warning_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_no_redef_warning_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn aliased(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aliased(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn aliased_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_aliased_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reference_count(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reference_count(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reference_count_raw(this: *const Self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reference_count_raw(this: *mut Self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: rb_method_type_t,
        iseq_overload: ::std::os::raw::c_uint,
        no_redef_warning: ::std::os::raw::c_uint,
        aliased: ::std::os::raw::c_uint,
        reference_count: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let iseq_overload: u32 = unsafe { ::std::mem::transmute(iseq_overload) };
            iseq_overload as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let no_redef_warning: u32 = unsafe { ::std::mem::transmute(no_redef_warning) };
            no_redef_warning as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let aliased: u32 = unsafe { ::std::mem::transmute(aliased) };
            aliased as u64
        });
        __bindgen_bitfield_unit.set(32usize, 28u8, {
            let reference_count: u32 = unsafe { ::std::mem::transmute(reference_count) };
            reference_count as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_id_table {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_code_position_struct {
    pub lineno: ::std::os::raw::c_int,
    pub column: ::std::os::raw::c_int,
}
pub type rb_code_position_t = rb_code_position_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_code_location_struct {
    pub beg_pos: rb_code_position_t,
    pub end_pos: rb_code_position_t,
}
pub type rb_code_location_t = rb_code_location_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RNode {
    pub flags: VALUE,
    pub nd_loc: rb_code_location_t,
    pub node_id: ::std::os::raw::c_int,
}
pub type NODE = RNode;
pub type rb_atomic_t = ::std::os::raw::c_uint;
pub type rb_nativethread_id_t = pthread_t;
pub type rb_nativethread_lock_t = pthread_mutex_t;
pub type rb_nativethread_cond_t = pthread_cond_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_thread_sched_waiting {
    pub flags: rb_thread_sched_waiting_thread_sched_waiting_flag,
    pub data: rb_thread_sched_waiting__bindgen_ty_1,
    pub node: ccan_list_node,
}
pub const rb_thread_sched_waiting_thread_sched_waiting_flag_thread_sched_waiting_none:
    rb_thread_sched_waiting_thread_sched_waiting_flag = 0;
pub const rb_thread_sched_waiting_thread_sched_waiting_flag_thread_sched_waiting_timeout:
    rb_thread_sched_waiting_thread_sched_waiting_flag = 1;
pub const rb_thread_sched_waiting_thread_sched_waiting_flag_thread_sched_waiting_io_read:
    rb_thread_sched_waiting_thread_sched_waiting_flag = 2;
pub const rb_thread_sched_waiting_thread_sched_waiting_flag_thread_sched_waiting_io_write:
    rb_thread_sched_waiting_thread_sched_waiting_flag = 8;
pub const rb_thread_sched_waiting_thread_sched_waiting_flag_thread_sched_waiting_io_force:
    rb_thread_sched_waiting_thread_sched_waiting_flag = 64;
pub type rb_thread_sched_waiting_thread_sched_waiting_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_thread_sched_waiting__bindgen_ty_1 {
    pub timeout: u64,
    pub fd: ::std::os::raw::c_int,
    pub result: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_thread_sched_item {
    pub node: rb_thread_sched_item__bindgen_ty_1,
    pub waiting_reason: rb_thread_sched_waiting,
    pub finished: bool,
    pub malloc_stack: bool,
    pub context_stack: *mut ::std::os::raw::c_void,
    pub context: *mut coroutine_context,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_thread_sched_item__bindgen_ty_1 {
    pub ubf: ccan_list_node,
    pub readyq: ccan_list_node,
    pub timeslice_threads: ccan_list_node,
    pub running_threads: ccan_list_node,
    pub zombie_threads: ccan_list_node,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_native_thread {
    pub serial: rb_atomic_t,
    pub vm: *mut rb_vm_struct,
    pub thread_id: rb_nativethread_id_t,
    pub tid: ::std::os::raw::c_int,
    pub running_thread: *mut rb_thread_struct,
    pub cond: rb_native_thread__bindgen_ty_1,
    pub altstack: *mut ::std::os::raw::c_void,
    pub nt_context: *mut coroutine_context,
    pub dedicated: ::std::os::raw::c_int,
    pub machine_stack_maxsize: usize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_native_thread__bindgen_ty_1 {
    pub intr: rb_nativethread_cond_t,
    pub readyq: rb_nativethread_cond_t,
}
impl ::std::fmt::Debug for rb_native_thread__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_native_thread__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for rb_native_thread {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_native_thread {{ serial: {:?}, vm: {:?}, thread_id: {:?}, tid: {:?}, running_thread: {:?}, cond: {:?}, altstack: {:?}, nt_context: {:?}, dedicated: {:?} }}" , self . serial , self . vm , self . thread_id , self . tid , self . running_thread , self . cond , self . altstack , self . nt_context , self . dedicated)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_thread_sched {
    pub lock_: rb_nativethread_lock_t,
    pub running: *mut rb_thread_struct,
    pub is_running: bool,
    pub is_running_timeslice: bool,
    pub enable_mn_threads: bool,
    pub readyq: ccan_list_head,
    pub readyq_cnt: ::std::os::raw::c_int,
    pub grq_node: ccan_list_node,
}
impl ::std::fmt::Debug for rb_thread_sched {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_thread_sched {{ lock_: {:?}, running: {:?}, is_running: {:?}, is_running_timeslice: {:?}, enable_mn_threads: {:?}, readyq: {:?}, readyq_cnt: {:?}, grq_node: {:?} }}" , self . lock_ , self . running , self . is_running , self . is_running_timeslice , self . enable_mn_threads , self . readyq , self . readyq_cnt , self . grq_node)
    }
}
pub type rb_snum_t = ::std::os::raw::c_long;
pub const ruby_tag_type_RUBY_TAG_NONE: ruby_tag_type = 0;
pub const ruby_tag_type_RUBY_TAG_RETURN: ruby_tag_type = 1;
pub const ruby_tag_type_RUBY_TAG_BREAK: ruby_tag_type = 2;
pub const ruby_tag_type_RUBY_TAG_NEXT: ruby_tag_type = 3;
pub const ruby_tag_type_RUBY_TAG_RETRY: ruby_tag_type = 4;
pub const ruby_tag_type_RUBY_TAG_REDO: ruby_tag_type = 5;
pub const ruby_tag_type_RUBY_TAG_RAISE: ruby_tag_type = 6;
pub const ruby_tag_type_RUBY_TAG_THROW: ruby_tag_type = 7;
pub const ruby_tag_type_RUBY_TAG_FATAL: ruby_tag_type = 8;
pub const ruby_tag_type_RUBY_TAG_MASK: ruby_tag_type = 15;
pub type ruby_tag_type = ::std::os::raw::c_uint;
pub type rb_compile_option_t = rb_compile_option_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_inline_constant_cache_entry {
    pub flags: VALUE,
    pub value: VALUE,
    pub _unused1: VALUE,
    pub _unused2: VALUE,
    pub ic_cref: *const rb_cref_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_inline_constant_cache {
    pub entry: *mut iseq_inline_constant_cache_entry,
    pub segments: *const ID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_inline_iv_cache_entry {
    pub value: usize,
    pub iv_set_name: ID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iseq_inline_storage_entry {
    pub once: iseq_inline_storage_entry__bindgen_ty_1,
    pub ic_cache: iseq_inline_constant_cache,
    pub iv_cache: iseq_inline_iv_cache_entry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_inline_storage_entry__bindgen_ty_1 {
    pub running_thread: *mut rb_thread_struct,
    pub value: VALUE,
}
impl ::std::fmt::Debug for iseq_inline_storage_entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "iseq_inline_storage_entry {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_calling_info {
    pub cd: *mut rb_call_data,
    pub cc: *const rb_callcache,
    pub block_handler: VALUE,
    pub recv: VALUE,
    pub argc: ::std::os::raw::c_int,
    pub kw_splat: bool,
    pub heap_argv: VALUE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_location_struct {
    pub pathobj: VALUE,
    pub base_label: VALUE,
    pub label: VALUE,
    pub first_lineno: ::std::os::raw::c_int,
    pub node_id: ::std::os::raw::c_int,
    pub code_location: rb_code_location_t,
}
pub type rb_iseq_location_t = rb_iseq_location_struct;
pub type iseq_bits_t = usize;
pub const rb_iseq_type_ISEQ_TYPE_TOP: rb_iseq_type = 0;
pub const rb_iseq_type_ISEQ_TYPE_METHOD: rb_iseq_type = 1;
pub const rb_iseq_type_ISEQ_TYPE_BLOCK: rb_iseq_type = 2;
pub const rb_iseq_type_ISEQ_TYPE_CLASS: rb_iseq_type = 3;
pub const rb_iseq_type_ISEQ_TYPE_RESCUE: rb_iseq_type = 4;
pub const rb_iseq_type_ISEQ_TYPE_ENSURE: rb_iseq_type = 5;
pub const rb_iseq_type_ISEQ_TYPE_EVAL: rb_iseq_type = 6;
pub const rb_iseq_type_ISEQ_TYPE_MAIN: rb_iseq_type = 7;
pub const rb_iseq_type_ISEQ_TYPE_PLAIN: rb_iseq_type = 8;
pub type rb_iseq_type = ::std::os::raw::c_uint;
pub type rb_jit_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut rb_execution_context_struct,
        arg2: *mut rb_control_frame_struct,
    ) -> VALUE,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_iseq_constant_body {
    pub type_: rb_iseq_type,
    pub iseq_size: ::std::os::raw::c_uint,
    pub iseq_encoded: *mut VALUE,
    pub param: rb_iseq_constant_body__bindgen_ty_1,
    pub location: rb_iseq_location_t,
    pub insns_info: rb_iseq_constant_body_iseq_insn_info,
    pub local_table: *const ID,
    pub catch_table: *mut iseq_catch_table,
    pub parent_iseq: *const rb_iseq_struct,
    pub local_iseq: *mut rb_iseq_struct,
    pub is_entries: *mut iseq_inline_storage_entry,
    pub call_data: *mut rb_call_data,
    pub variable: rb_iseq_constant_body__bindgen_ty_2,
    pub local_table_size: ::std::os::raw::c_uint,
    pub ic_size: ::std::os::raw::c_uint,
    pub ise_size: ::std::os::raw::c_uint,
    pub ivc_size: ::std::os::raw::c_uint,
    pub icvarc_size: ::std::os::raw::c_uint,
    pub ci_size: ::std::os::raw::c_uint,
    pub stack_max: ::std::os::raw::c_uint,
    pub builtin_attrs: ::std::os::raw::c_uint,
    pub prism: bool,
    pub mark_bits: rb_iseq_constant_body__bindgen_ty_3,
    pub outer_variables: *mut rb_id_table,
    pub mandatory_only_iseq: *const rb_iseq_t,
    pub jit_entry: rb_jit_func_t,
    pub jit_entry_calls: ::std::os::raw::c_ulong,
    pub jit_exception: rb_jit_func_t,
    pub jit_exception_calls: ::std::os::raw::c_ulong,
    pub rjit_blocks: VALUE,
    pub yjit_payload: *mut ::std::os::raw::c_void,
    pub yjit_calls_at_interv: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_constant_body__bindgen_ty_1 {
    pub flags: rb_iseq_constant_body__bindgen_ty_1__bindgen_ty_1,
    pub size: ::std::os::raw::c_uint,
    pub lead_num: ::std::os::raw::c_int,
    pub opt_num: ::std::os::raw::c_int,
    pub rest_start: ::std::os::raw::c_int,
    pub post_start: ::std::os::raw::c_int,
    pub post_num: ::std::os::raw::c_int,
    pub block_start: ::std::os::raw::c_int,
    pub opt_table: *const VALUE,
    pub keyword: *const rb_iseq_constant_body__bindgen_ty_1_rb_iseq_param_keyword,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_constant_body__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
impl rb_iseq_constant_body__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn has_lead(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_lead(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_lead_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_lead_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_opt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_opt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_opt_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_opt_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_rest(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_rest(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_rest_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_rest_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_post(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_post(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_post_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_post_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_kw(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_kw(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_kw_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_kw_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_kwrest(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_kwrest(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_kwrest_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_kwrest_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_block(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_block(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_block_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_block_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ambiguous_param0(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ambiguous_param0(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ambiguous_param0_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ambiguous_param0_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn accepts_no_kwarg(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_accepts_no_kwarg(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn accepts_no_kwarg_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_accepts_no_kwarg_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ruby2_keywords(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ruby2_keywords(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ruby2_keywords_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ruby2_keywords_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn anon_rest(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_anon_rest(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn anon_rest_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_anon_rest_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn anon_kwrest(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_anon_kwrest(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn anon_kwrest_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_anon_kwrest_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_block(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_block(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_block_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_block_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn forwardable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_forwardable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn forwardable_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_forwardable_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        has_lead: ::std::os::raw::c_uint,
        has_opt: ::std::os::raw::c_uint,
        has_rest: ::std::os::raw::c_uint,
        has_post: ::std::os::raw::c_uint,
        has_kw: ::std::os::raw::c_uint,
        has_kwrest: ::std::os::raw::c_uint,
        has_block: ::std::os::raw::c_uint,
        ambiguous_param0: ::std::os::raw::c_uint,
        accepts_no_kwarg: ::std::os::raw::c_uint,
        ruby2_keywords: ::std::os::raw::c_uint,
        anon_rest: ::std::os::raw::c_uint,
        anon_kwrest: ::std::os::raw::c_uint,
        use_block: ::std::os::raw::c_uint,
        forwardable: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let has_lead: u32 = unsafe { ::std::mem::transmute(has_lead) };
            has_lead as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let has_opt: u32 = unsafe { ::std::mem::transmute(has_opt) };
            has_opt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_rest: u32 = unsafe { ::std::mem::transmute(has_rest) };
            has_rest as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let has_post: u32 = unsafe { ::std::mem::transmute(has_post) };
            has_post as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let has_kw: u32 = unsafe { ::std::mem::transmute(has_kw) };
            has_kw as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_kwrest: u32 = unsafe { ::std::mem::transmute(has_kwrest) };
            has_kwrest as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let has_block: u32 = unsafe { ::std::mem::transmute(has_block) };
            has_block as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ambiguous_param0: u32 = unsafe { ::std::mem::transmute(ambiguous_param0) };
            ambiguous_param0 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let accepts_no_kwarg: u32 = unsafe { ::std::mem::transmute(accepts_no_kwarg) };
            accepts_no_kwarg as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ruby2_keywords: u32 = unsafe { ::std::mem::transmute(ruby2_keywords) };
            ruby2_keywords as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let anon_rest: u32 = unsafe { ::std::mem::transmute(anon_rest) };
            anon_rest as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let anon_kwrest: u32 = unsafe { ::std::mem::transmute(anon_kwrest) };
            anon_kwrest as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let use_block: u32 = unsafe { ::std::mem::transmute(use_block) };
            use_block as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let forwardable: u32 = unsafe { ::std::mem::transmute(forwardable) };
            forwardable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_constant_body__bindgen_ty_1_rb_iseq_param_keyword {
    pub num: ::std::os::raw::c_int,
    pub required_num: ::std::os::raw::c_int,
    pub bits_start: ::std::os::raw::c_int,
    pub rest_start: ::std::os::raw::c_int,
    pub table: *const ID,
    pub default_values: *mut VALUE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_constant_body_iseq_insn_info {
    pub body: *const iseq_insn_info_entry,
    pub positions: *mut ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub succ_index_table: *mut succ_index_table,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_constant_body__bindgen_ty_2 {
    pub flip_count: rb_snum_t,
    pub script_lines: VALUE,
    pub coverage: VALUE,
    pub pc2branchindex: VALUE,
    pub original_iseq: *mut VALUE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_iseq_constant_body__bindgen_ty_3 {
    pub list: *mut iseq_bits_t,
    pub single: iseq_bits_t,
}
impl ::std::fmt::Debug for rb_iseq_constant_body__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_iseq_constant_body__bindgen_ty_3 {{ union }}")
    }
}
impl ::std::fmt::Debug for rb_iseq_constant_body {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_iseq_constant_body {{ type: {:?}, iseq_size: {:?}, iseq_encoded: {:?}, param: {:?}, location: {:?}, insns_info: {:?}, local_table: {:?}, catch_table: {:?}, parent_iseq: {:?}, local_iseq: {:?}, is_entries: {:?}, call_data: {:?}, variable: {:?}, local_table_size: {:?}, ic_size: {:?}, ise_size: {:?}, ivc_size: {:?}, icvarc_size: {:?}, ci_size: {:?}, stack_max: {:?}, builtin_attrs: {:?}, prism: {:?}, mark_bits: {:?}, outer_variables: {:?}, mandatory_only_iseq: {:?}, jit_entry: {:?}, jit_entry_calls: {:?}, jit_exception: {:?}, jit_exception_calls: {:?}, rjit_blocks: {:?}, yjit_payload: {:?} }}" , self . type_ , self . iseq_size , self . iseq_encoded , self . param , self . location , self . insns_info , self . local_table , self . catch_table , self . parent_iseq , self . local_iseq , self . is_entries , self . call_data , self . variable , self . local_table_size , self . ic_size , self . ise_size , self . ivc_size , self . icvarc_size , self . ci_size , self . stack_max , self . builtin_attrs , self . prism , self . mark_bits , self . outer_variables , self . mandatory_only_iseq , self . jit_entry , self . jit_entry_calls , self . jit_exception , self . jit_exception_calls , self . rjit_blocks , self . yjit_payload)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_iseq_struct {
    pub flags: VALUE,
    pub wrapper: VALUE,
    pub body: *mut rb_iseq_constant_body,
    pub aux: rb_iseq_struct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_iseq_struct__bindgen_ty_1 {
    pub compile_data: *mut iseq_compile_data,
    pub loader: rb_iseq_struct__bindgen_ty_1__bindgen_ty_1,
    pub exec: rb_iseq_struct__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_struct__bindgen_ty_1__bindgen_ty_1 {
    pub obj: VALUE,
    pub index: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_struct__bindgen_ty_1__bindgen_ty_2 {
    pub local_hooks: *mut rb_hook_list_struct,
    pub global_trace_events: rb_event_flag_t,
}
impl ::std::fmt::Debug for rb_iseq_struct__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_iseq_struct__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for rb_iseq_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "rb_iseq_struct {{ flags: {:?}, wrapper: {:?}, body: {:?}, aux: {:?} }}",
            self.flags, self.wrapper, self.body, self.aux
        )
    }
}
pub type rb_vm_at_exit_func = ::std::option::Option<unsafe extern "C" fn(arg1: *mut rb_vm_struct)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_at_exit_list {
    pub func: rb_vm_at_exit_func,
    pub next: *mut rb_at_exit_list,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_hook_list_struct {
    pub hooks: *mut rb_event_hook_struct,
    pub events: rb_event_flag_t,
    pub running: ::std::os::raw::c_uint,
    pub need_clean: bool,
    pub is_local: bool,
}
pub type rb_hook_list_t = rb_hook_list_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_builtin_function {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct global_object_list {
    pub varptr: *mut VALUE,
    pub next: *mut global_object_list,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_vm_struct {
    pub self_: VALUE,
    pub ractor: rb_vm_struct__bindgen_ty_1,
    pub main_altstack: *mut ::std::os::raw::c_void,
    pub fork_gen: rb_serial_t,
    pub waiting_fds: ccan_list_head,
    pub ubf_async_safe: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub mark_object_ary: VALUE,
    pub global_object_list: *mut global_object_list,
    pub special_exceptions: [VALUE; 5usize],
    pub top_self: VALUE,
    pub load_path: VALUE,
    pub load_path_snapshot: VALUE,
    pub load_path_check_cache: VALUE,
    pub expanded_load_path: VALUE,
    pub loaded_features: VALUE,
    pub loaded_features_snapshot: VALUE,
    pub loaded_features_realpaths: VALUE,
    pub loaded_features_realpath_map: VALUE,
    pub loaded_features_index: *mut st_table,
    pub loading_table: *mut st_table,
    pub static_ext_inits: *mut st_table,
    pub trap_list: rb_vm_struct__bindgen_ty_2,
    pub postponed_job_queue: *mut rb_postponed_job_queue,
    pub src_encoding_index: ::std::os::raw::c_int,
    pub workqueue: ccan_list_head,
    pub workqueue_lock: rb_nativethread_lock_t,
    pub orig_progname: VALUE,
    pub progname: VALUE,
    pub coverages: VALUE,
    pub me2counter: VALUE,
    pub coverage_mode: ::std::os::raw::c_int,
    pub gc: rb_vm_struct__bindgen_ty_3,
    pub at_exit: *mut rb_at_exit_list,
    pub frozen_strings: *mut st_table,
    pub builtin_function_table: *const rb_builtin_function,
    pub ci_table: *mut st_table,
    pub negative_cme_table: *mut rb_id_table,
    pub overloaded_cme_table: *mut st_table,
    pub unused_block_warning_table: *mut st_table,
    pub constant_cache: *mut rb_id_table,
    pub inserting_constant_cache_id: ID,
    pub global_cc_cache_table: [*const rb_callcache; 1023usize],
    pub default_params: rb_vm_struct__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_1 {
    pub set: ccan_list_head,
    pub cnt: ::std::os::raw::c_uint,
    pub blocking_cnt: ::std::os::raw::c_uint,
    pub main_ractor: *mut rb_ractor_struct,
    pub main_thread: *mut rb_thread_struct,
    pub sync: rb_vm_struct__bindgen_ty_1__bindgen_ty_1,
    pub sched: rb_vm_struct__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_1__bindgen_ty_1 {
    pub lock: rb_nativethread_lock_t,
    pub lock_owner: *mut rb_ractor_struct,
    pub lock_rec: ::std::os::raw::c_uint,
    pub terminate_cond: rb_nativethread_cond_t,
    pub terminate_waiting: bool,
}
impl ::std::fmt::Debug for rb_vm_struct__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_vm_struct__bindgen_ty_1__bindgen_ty_1 {{ lock: {:?}, lock_owner: {:?}, lock_rec: {:?}, terminate_cond: {:?}, terminate_waiting: {:?} }}" , self . lock , self . lock_owner , self . lock_rec , self . terminate_cond , self . terminate_waiting)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_1__bindgen_ty_2 {
    pub lock: rb_nativethread_lock_t,
    pub lock_owner: *mut rb_ractor_struct,
    pub locked: bool,
    pub cond: rb_nativethread_cond_t,
    pub snt_cnt: ::std::os::raw::c_uint,
    pub dnt_cnt: ::std::os::raw::c_uint,
    pub running_cnt: ::std::os::raw::c_uint,
    pub max_cpu: ::std::os::raw::c_uint,
    pub grq: ccan_list_head,
    pub grq_cnt: ::std::os::raw::c_uint,
    pub running_threads: ccan_list_head,
    pub timeslice_threads: ccan_list_head,
    pub zombie_threads: ccan_list_head,
    pub timeslice_wait_inf: bool,
    pub barrier_complete_cond: rb_nativethread_cond_t,
    pub barrier_release_cond: rb_nativethread_cond_t,
    pub barrier_waiting: bool,
    pub barrier_waiting_cnt: ::std::os::raw::c_uint,
    pub barrier_serial: ::std::os::raw::c_uint,
}
impl ::std::fmt::Debug for rb_vm_struct__bindgen_ty_1__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_vm_struct__bindgen_ty_1__bindgen_ty_2 {{ lock: {:?}, lock_owner: {:?}, locked: {:?}, cond: {:?}, snt_cnt: {:?}, dnt_cnt: {:?}, running_cnt: {:?}, max_cpu: {:?}, grq: {:?}, grq_cnt: {:?}, running_threads: {:?}, timeslice_threads: {:?}, zombie_threads: {:?}, timeslice_wait_inf: {:?}, barrier_complete_cond: {:?}, barrier_release_cond: {:?}, barrier_waiting: {:?}, barrier_waiting_cnt: {:?}, barrier_serial: {:?} }}" , self . lock , self . lock_owner , self . locked , self . cond , self . snt_cnt , self . dnt_cnt , self . running_cnt , self . max_cpu , self . grq , self . grq_cnt , self . running_threads , self . timeslice_threads , self . zombie_threads , self . timeslice_wait_inf , self . barrier_complete_cond , self . barrier_release_cond , self . barrier_waiting , self . barrier_waiting_cnt , self . barrier_serial)
    }
}
impl ::std::fmt::Debug for rb_vm_struct__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_vm_struct__bindgen_ty_1 {{ set: {:?}, cnt: {:?}, blocking_cnt: {:?}, main_ractor: {:?}, main_thread: {:?}, sync: {:?}, sched: {:?} }}" , self . set , self . cnt , self . blocking_cnt , self . main_ractor , self . main_thread , self . sync , self . sched)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_2 {
    pub cmd: [VALUE; 65usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_3 {
    pub objspace: *mut rb_objspace,
    pub mark_func_data: *mut rb_vm_struct__bindgen_ty_3_gc_mark_func_data_struct,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_3_gc_mark_func_data_struct {
    pub data: *mut ::std::os::raw::c_void,
    pub mark_func:
        ::std::option::Option<unsafe extern "C" fn(v: VALUE, data: *mut ::std::os::raw::c_void)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_4 {
    pub thread_vm_stack_size: usize,
    pub thread_machine_stack_size: usize,
    pub fiber_vm_stack_size: usize,
    pub fiber_machine_stack_size: usize,
}
impl ::std::fmt::Debug for rb_vm_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_vm_struct {{ self: {:?}, ractor: {:?}, main_altstack: {:?}, fork_gen: {:?}, waiting_fds: {:?}, ubf_async_safe: {:?}, running : {:?}, thread_abort_on_exception : {:?}, thread_report_on_exception : {:?}, thread_ignore_deadlock : {:?}, mark_object_ary: {:?}, global_object_list: {:?}, special_exceptions: {:?}, top_self: {:?}, load_path: {:?}, load_path_snapshot: {:?}, load_path_check_cache: {:?}, expanded_load_path: {:?}, loaded_features: {:?}, loaded_features_snapshot: {:?}, loaded_features_realpaths: {:?}, loaded_features_realpath_map: {:?}, loaded_features_index: {:?}, loading_table: {:?}, static_ext_inits: {:?}, trap_list: {:?}, postponed_job_queue: {:?}, src_encoding_index: {:?}, workqueue: {:?}, workqueue_lock: {:?}, orig_progname: {:?}, progname: {:?}, coverages: {:?}, me2counter: {:?}, coverage_mode: {:?}, gc: {:?}, at_exit: {:?}, frozen_strings: {:?}, builtin_function_table: {:?}, ci_table: {:?}, negative_cme_table: {:?}, overloaded_cme_table: {:?}, unused_block_warning_table: {:?}, constant_cache: {:?}, inserting_constant_cache_id: {:?}, global_cc_cache_table: {:?}, default_params: {:?} }}" , self . self_ , self . ractor , self . main_altstack , self . fork_gen , self . waiting_fds , self . ubf_async_safe , self . running () , self . thread_abort_on_exception () , self . thread_report_on_exception () , self . thread_ignore_deadlock () , self . mark_object_ary , self . global_object_list , self . special_exceptions , self . top_self , self . load_path , self . load_path_snapshot , self . load_path_check_cache , self . expanded_load_path , self . loaded_features , self . loaded_features_snapshot , self . loaded_features_realpaths , self . loaded_features_realpath_map , self . loaded_features_index , self . loading_table , self . static_ext_inits , self . trap_list , self . postponed_job_queue , self . src_encoding_index , self . workqueue , self . workqueue_lock , self . orig_progname , self . progname , self . coverages , self . me2counter , self . coverage_mode , self . gc , self . at_exit , self . frozen_strings , self . builtin_function_table , self . ci_table , self . negative_cme_table , self . overloaded_cme_table , self . unused_block_warning_table , self . constant_cache , self . inserting_constant_cache_id , self . global_cc_cache_table , self . default_params)
    }
}
impl rb_vm_struct {
    #[inline]
    pub fn running(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_running(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn running_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_running_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn thread_abort_on_exception(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_thread_abort_on_exception(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn thread_abort_on_exception_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_thread_abort_on_exception_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn thread_report_on_exception(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_thread_report_on_exception(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn thread_report_on_exception_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_thread_report_on_exception_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn thread_ignore_deadlock(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_thread_ignore_deadlock(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn thread_ignore_deadlock_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_thread_ignore_deadlock_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        running: ::std::os::raw::c_uint,
        thread_abort_on_exception: ::std::os::raw::c_uint,
        thread_report_on_exception: ::std::os::raw::c_uint,
        thread_ignore_deadlock: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let running: u32 = unsafe { ::std::mem::transmute(running) };
            running as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let thread_abort_on_exception: u32 =
                unsafe { ::std::mem::transmute(thread_abort_on_exception) };
            thread_abort_on_exception as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let thread_report_on_exception: u32 =
                unsafe { ::std::mem::transmute(thread_report_on_exception) };
            thread_report_on_exception as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let thread_ignore_deadlock: u32 =
                unsafe { ::std::mem::transmute(thread_ignore_deadlock) };
            thread_ignore_deadlock as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type rb_vm_t = rb_vm_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_control_frame_struct {
    pub pc: *const VALUE,
    pub sp: *mut VALUE,
    pub iseq: *const rb_iseq_t,
    pub self_: VALUE,
    pub ep: *const VALUE,
    pub block_code: *const ::std::os::raw::c_void,
    pub jit_return: *mut ::std::os::raw::c_void,
}
pub type rb_control_frame_t = rb_control_frame_struct;
pub const rb_thread_status_THREAD_RUNNABLE: rb_thread_status = 0;
pub const rb_thread_status_THREAD_STOPPED: rb_thread_status = 1;
pub const rb_thread_status_THREAD_STOPPED_FOREVER: rb_thread_status = 2;
pub const rb_thread_status_THREAD_KILLED: rb_thread_status = 3;
pub type rb_thread_status = ::std::os::raw::c_uint;
pub type rb_jmpbuf_t = sigjmp_buf;
pub type rb_vm_tag_jmpbuf_t = rb_jmpbuf_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_tag {
    pub tag: VALUE,
    pub retval: VALUE,
    pub buf: rb_vm_tag_jmpbuf_t,
    pub prev: *mut rb_vm_tag,
    pub state: ruby_tag_type,
    pub lock_rec: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_unblock_callback {
    pub func: rb_unblock_function_t,
    pub arg: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_mutex_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_fiber_struct {
    _unused: [u8; 0],
}
pub type rb_fiber_t = rb_fiber_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_waiting_list {
    pub next: *mut rb_waiting_list,
    pub thread: *mut rb_thread_struct,
    pub fiber: *mut rb_fiber_struct,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_execution_context_struct {
    pub vm_stack: *mut VALUE,
    pub vm_stack_size: usize,
    pub cfp: *mut rb_control_frame_t,
    pub tag: *mut rb_vm_tag,
    pub interrupt_flag: rb_atomic_t,
    pub interrupt_mask: rb_atomic_t,
    pub fiber_ptr: *mut rb_fiber_t,
    pub thread_ptr: *mut rb_thread_struct,
    pub local_storage: *mut rb_id_table,
    pub local_storage_recursive_hash: VALUE,
    pub local_storage_recursive_hash_for_trace: VALUE,
    pub storage: VALUE,
    pub root_lep: *const VALUE,
    pub root_svar: VALUE,
    pub trace_arg: *mut rb_trace_arg_struct,
    pub errinfo: VALUE,
    pub passed_block_handler: VALUE,
    pub raised_flag: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub private_const_reference: VALUE,
    pub machine: rb_execution_context_struct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_execution_context_struct__bindgen_ty_1 {
    pub stack_start: *mut VALUE,
    pub stack_end: *mut VALUE,
    pub stack_maxsize: usize,
    pub regs: jmp_buf,
}
impl rb_execution_context_struct {
    #[inline]
    pub fn method_missing_reason(&self) -> method_missing_reason {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_method_missing_reason(&mut self, val: method_missing_reason) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn method_missing_reason_raw(this: *const Self) -> method_missing_reason {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_method_missing_reason_raw(this: *mut Self, val: method_missing_reason) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        method_missing_reason: method_missing_reason,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let method_missing_reason: u32 =
                unsafe { ::std::mem::transmute(method_missing_reason) };
            method_missing_reason as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type rb_execution_context_t = rb_execution_context_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_ext_config {
    pub ractor_safe: bool,
}
pub type rb_ractor_t = rb_ractor_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_thread_struct {
    pub lt_node: ccan_list_node,
    pub self_: VALUE,
    pub ractor: *mut rb_ractor_t,
    pub vm: *mut rb_vm_t,
    pub nt: *mut rb_native_thread,
    pub ec: *mut rb_execution_context_t,
    pub sched: rb_thread_sched_item,
    pub mn_schedulable: bool,
    pub serial: rb_atomic_t,
    pub last_status: VALUE,
    pub calling: *mut rb_calling_info,
    pub top_self: VALUE,
    pub top_wrapper: VALUE,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub priority: i8,
    pub running_time_us: u32,
    pub blocking_region_buffer: *mut ::std::os::raw::c_void,
    pub thgroup: VALUE,
    pub value: VALUE,
    pub pending_interrupt_queue: VALUE,
    pub pending_interrupt_mask_stack: VALUE,
    pub interrupt_lock: rb_nativethread_lock_t,
    pub unblock: rb_unblock_callback,
    pub locking_mutex: VALUE,
    pub keeping_mutexes: *mut rb_mutex_struct,
    pub interrupt_exec_tasks: ccan_list_head,
    pub join_list: *mut rb_waiting_list,
    pub invoke_arg: rb_thread_struct__bindgen_ty_1,
    pub invoke_type: rb_thread_struct_thread_invoke_type,
    pub stat_insn_usage: VALUE,
    pub root_fiber: *mut rb_fiber_t,
    pub scheduler: VALUE,
    pub blocking: ::std::os::raw::c_uint,
    pub name: VALUE,
    pub specific_storage: *mut *mut ::std::os::raw::c_void,
    pub ext_config: rb_ext_config,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_thread_struct__bindgen_ty_1 {
    pub proc_: rb_thread_struct__bindgen_ty_1__bindgen_ty_1,
    pub func: rb_thread_struct__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_thread_struct__bindgen_ty_1__bindgen_ty_1 {
    pub proc_: VALUE,
    pub args: VALUE,
    pub kw_splat: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_thread_struct__bindgen_ty_1__bindgen_ty_2 {
    pub func:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> VALUE>,
    pub arg: *mut ::std::os::raw::c_void,
}
impl ::std::fmt::Debug for rb_thread_struct__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_thread_struct__bindgen_ty_1 {{ union }}")
    }
}
pub const rb_thread_struct_thread_invoke_type_thread_invoke_type_none:
    rb_thread_struct_thread_invoke_type = 0;
pub const rb_thread_struct_thread_invoke_type_thread_invoke_type_proc:
    rb_thread_struct_thread_invoke_type = 1;
pub const rb_thread_struct_thread_invoke_type_thread_invoke_type_ractor_proc:
    rb_thread_struct_thread_invoke_type = 2;
pub const rb_thread_struct_thread_invoke_type_thread_invoke_type_func:
    rb_thread_struct_thread_invoke_type = 3;
pub type rb_thread_struct_thread_invoke_type = ::std::os::raw::c_uint;
impl ::std::fmt::Debug for rb_thread_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_thread_struct {{ lt_node: {:?}, self: {:?}, ractor: {:?}, vm: {:?}, nt: {:?}, ec: {:?}, sched: {:?}, mn_schedulable: {:?}, serial: {:?}, last_status: {:?}, calling: {:?}, top_self: {:?}, top_wrapper: {:?}, status : {:?}, has_dedicated_nt : {:?}, to_kill : {:?}, abort_on_exception : {:?}, report_on_exception : {:?}, pending_interrupt_queue_checked : {:?}, blocking_region_buffer: {:?}, thgroup: {:?}, value: {:?}, pending_interrupt_queue: {:?}, pending_interrupt_mask_stack: {:?}, interrupt_lock: {:?}, unblock: {:?}, locking_mutex: {:?}, keeping_mutexes: {:?}, interrupt_exec_tasks: {:?}, join_list: {:?}, invoke_arg: {:?}, invoke_type: {:?}, stat_insn_usage: {:?}, root_fiber: {:?}, scheduler: {:?}, blocking: {:?}, name: {:?}, specific_storage: {:?}, ext_config: {:?} }}" , self . lt_node , self . self_ , self . ractor , self . vm , self . nt , self . ec , self . sched , self . mn_schedulable , self . serial , self . last_status , self . calling , self . top_self , self . top_wrapper , self . status () , self . has_dedicated_nt () , self . to_kill () , self . abort_on_exception () , self . report_on_exception () , self . pending_interrupt_queue_checked () , self . blocking_region_buffer , self . thgroup , self . value , self . pending_interrupt_queue , self . pending_interrupt_mask_stack , self . interrupt_lock , self . unblock , self . locking_mutex , self . keeping_mutexes , self . interrupt_exec_tasks , self . join_list , self . invoke_arg , self . invoke_type , self . stat_insn_usage , self . root_fiber , self . scheduler , self . blocking , self . name , self . specific_storage , self . ext_config)
    }
}
impl rb_thread_struct {
    #[inline]
    pub fn status(&self) -> rb_thread_status {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_status(&mut self, val: rb_thread_status) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn status_raw(this: *const Self) -> rb_thread_status {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_status_raw(this: *mut Self, val: rb_thread_status) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn has_dedicated_nt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_dedicated_nt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn has_dedicated_nt_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_has_dedicated_nt_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn to_kill(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_to_kill(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn to_kill_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_to_kill_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn abort_on_exception(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_abort_on_exception(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn abort_on_exception_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_abort_on_exception_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn report_on_exception(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_report_on_exception(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn report_on_exception_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_report_on_exception_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pending_interrupt_queue_checked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pending_interrupt_queue_checked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pending_interrupt_queue_checked_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pending_interrupt_queue_checked_raw(
        this: *mut Self,
        val: ::std::os::raw::c_uint,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        status: rb_thread_status,
        has_dedicated_nt: ::std::os::raw::c_uint,
        to_kill: ::std::os::raw::c_uint,
        abort_on_exception: ::std::os::raw::c_uint,
        report_on_exception: ::std::os::raw::c_uint,
        pending_interrupt_queue_checked: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let status: u32 = unsafe { ::std::mem::transmute(status) };
            status as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_dedicated_nt: u32 = unsafe { ::std::mem::transmute(has_dedicated_nt) };
            has_dedicated_nt as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let to_kill: u32 = unsafe { ::std::mem::transmute(to_kill) };
            to_kill as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let abort_on_exception: u32 = unsafe { ::std::mem::transmute(abort_on_exception) };
            abort_on_exception as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let report_on_exception: u32 = unsafe { ::std::mem::transmute(report_on_exception) };
            report_on_exception as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pending_interrupt_queue_checked: u32 =
                unsafe { ::std::mem::transmute(pending_interrupt_queue_checked) };
            pending_interrupt_queue_checked as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type rb_thread_t = rb_thread_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_trace_arg_struct {
    pub event: rb_event_flag_t,
    pub ec: *mut rb_execution_context_t,
    pub cfp: *const rb_control_frame_t,
    pub self_: VALUE,
    pub id: ID,
    pub called_id: ID,
    pub klass: VALUE,
    pub data: VALUE,
    pub klass_solved: ::std::os::raw::c_int,
    pub lineno: ::std::os::raw::c_int,
    pub path: VALUE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_ractor_pub {
    pub self_: VALUE,
    pub id: u32,
    pub hooks: rb_hook_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_objspace {
    _unused: [u8; 0],
}
pub type attr_index_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_subclass_entry {
    pub klass: VALUE,
    pub next: *mut rb_subclass_entry,
    pub prev: *mut rb_subclass_entry,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_classext_struct {
    pub iv_ptr: *mut VALUE,
    pub const_tbl: *mut rb_id_table,
    pub callable_m_tbl: *mut rb_id_table,
    pub cc_tbl: *mut rb_id_table,
    pub cvc_tbl: *mut rb_id_table,
    pub superclass_depth: usize,
    pub superclasses: *mut VALUE,
    pub subclasses: *mut rb_subclass_entry,
    pub subclass_entry: *mut rb_subclass_entry,
    pub module_subclass_entry: *mut rb_subclass_entry,
    pub origin_: VALUE,
    pub refined_class: VALUE,
    pub as_: rb_classext_struct__bindgen_ty_1,
    pub includer: VALUE,
    pub max_iv_count: attr_index_t,
    pub variation_count: ::std::os::raw::c_uchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub classpath: VALUE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_classext_struct__bindgen_ty_1 {
    pub class: rb_classext_struct__bindgen_ty_1__bindgen_ty_1,
    pub singleton_class: rb_classext_struct__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_classext_struct__bindgen_ty_1__bindgen_ty_1 {
    pub allocator: rb_alloc_func_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_classext_struct__bindgen_ty_1__bindgen_ty_2 {
    pub attached_object: VALUE,
}
impl ::std::fmt::Debug for rb_classext_struct__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_classext_struct__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for rb_classext_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_classext_struct {{ iv_ptr: {:?}, const_tbl: {:?}, callable_m_tbl: {:?}, cc_tbl: {:?}, cvc_tbl: {:?}, superclasses: {:?}, subclasses: {:?}, subclass_entry: {:?}, module_subclass_entry: {:?}, origin_: {:?}, refined_class: {:?}, as: {:?}, includer: {:?}, variation_count: {:?}, permanent_classpath : {:?}, cloned : {:?}, classpath: {:?} }}" , self . iv_ptr , self . const_tbl , self . callable_m_tbl , self . cc_tbl , self . cvc_tbl , self . superclasses , self . subclasses , self . subclass_entry , self . module_subclass_entry , self . origin_ , self . refined_class , self . as_ , self . includer , self . variation_count , self . permanent_classpath () , self . cloned () , self . classpath)
    }
}
impl rb_classext_struct {
    #[inline]
    pub fn permanent_classpath(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_permanent_classpath(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn permanent_classpath_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_permanent_classpath_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cloned(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cloned(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cloned_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_cloned_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        permanent_classpath: bool,
        cloned: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let permanent_classpath: u8 = unsafe { ::std::mem::transmute(permanent_classpath) };
            permanent_classpath as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cloned: u8 = unsafe { ::std::mem::transmute(cloned) };
            cloned as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type rb_classext_t = rb_classext_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RClass {
    pub basic: RBasic,
    pub super_: VALUE,
    pub m_tbl: *mut rb_id_table,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RClass_and_rb_classext_t {
    pub rclass: RClass,
    pub classext: rb_classext_t,
}
impl ::std::fmt::Debug for RClass_and_rb_classext_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RClass_and_rb_classext_t {{ rclass: {:?}, classext: {:?} }}",
            self.rclass, self.classext
        )
    }
}
pub const rb_ractor_basket_type_basket_type_none: rb_ractor_basket_type = 0;
pub const rb_ractor_basket_type_basket_type_ref: rb_ractor_basket_type = 1;
pub const rb_ractor_basket_type_basket_type_copy: rb_ractor_basket_type = 2;
pub const rb_ractor_basket_type_basket_type_move: rb_ractor_basket_type = 3;
pub const rb_ractor_basket_type_basket_type_will: rb_ractor_basket_type = 4;
pub const rb_ractor_basket_type_basket_type_deleted: rb_ractor_basket_type = 5;
pub const rb_ractor_basket_type_basket_type_reserved: rb_ractor_basket_type = 6;
pub const rb_ractor_basket_type_basket_type_take_basket: rb_ractor_basket_type = 7;
pub const rb_ractor_basket_type_basket_type_yielding: rb_ractor_basket_type = 8;
pub type rb_ractor_basket_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_ractor_selector_take_config {
    pub closed: bool,
    pub oneshot: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_ractor_basket {
    pub type_: rb_ractor_basket__bindgen_ty_1,
    pub sender: VALUE,
    pub p: rb_ractor_basket__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_ractor_basket__bindgen_ty_1 {
    pub e: rb_ractor_basket_type,
    pub atomic: rb_atomic_t,
}
impl ::std::fmt::Debug for rb_ractor_basket__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_ractor_basket__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_ractor_basket__bindgen_ty_2 {
    pub send: rb_ractor_basket__bindgen_ty_2__bindgen_ty_1,
    pub take: rb_ractor_basket__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_ractor_basket__bindgen_ty_2__bindgen_ty_1 {
    pub v: VALUE,
    pub exception: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_ractor_basket__bindgen_ty_2__bindgen_ty_2 {
    pub basket: *mut rb_ractor_basket,
    pub config: *mut rb_ractor_selector_take_config,
}
impl ::std::fmt::Debug for rb_ractor_basket__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_ractor_basket__bindgen_ty_2 {{ union }}")
    }
}
impl ::std::fmt::Debug for rb_ractor_basket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "rb_ractor_basket {{ type: {:?}, sender: {:?}, p: {:?} }}",
            self.type_, self.sender, self.p
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_ractor_queue {
    pub baskets: *mut rb_ractor_basket,
    pub start: ::std::os::raw::c_int,
    pub cnt: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_uint,
    pub reserved_cnt: ::std::os::raw::c_uint,
}
pub const rb_ractor_wait_status_wait_none: rb_ractor_wait_status = 0;
pub const rb_ractor_wait_status_wait_receiving: rb_ractor_wait_status = 1;
pub const rb_ractor_wait_status_wait_taking: rb_ractor_wait_status = 2;
pub const rb_ractor_wait_status_wait_yielding: rb_ractor_wait_status = 4;
pub const rb_ractor_wait_status_wait_moving: rb_ractor_wait_status = 8;
pub type rb_ractor_wait_status = ::std::os::raw::c_uint;
pub const rb_ractor_wakeup_status_wakeup_none: rb_ractor_wakeup_status = 0;
pub const rb_ractor_wakeup_status_wakeup_by_send: rb_ractor_wakeup_status = 1;
pub const rb_ractor_wakeup_status_wakeup_by_yield: rb_ractor_wakeup_status = 2;
pub const rb_ractor_wakeup_status_wakeup_by_take: rb_ractor_wakeup_status = 3;
pub const rb_ractor_wakeup_status_wakeup_by_close: rb_ractor_wakeup_status = 4;
pub const rb_ractor_wakeup_status_wakeup_by_interrupt: rb_ractor_wakeup_status = 5;
pub const rb_ractor_wakeup_status_wakeup_by_retry: rb_ractor_wakeup_status = 6;
pub type rb_ractor_wakeup_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_ractor_sync {
    pub lock: rb_nativethread_lock_t,
    pub incoming_port_closed: bool,
    pub outgoing_port_closed: bool,
    pub recv_queue: rb_ractor_queue,
    pub takers_queue: rb_ractor_queue,
    pub will_basket: rb_ractor_basket,
    pub wait: rb_ractor_sync_ractor_wait,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_ractor_sync_ractor_wait {
    pub status: rb_ractor_wait_status,
    pub wakeup_status: rb_ractor_wakeup_status,
    pub waiting_thread: *mut rb_thread_t,
}
impl ::std::fmt::Debug for rb_ractor_sync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_ractor_sync {{ lock: {:?}, incoming_port_closed: {:?}, outgoing_port_closed: {:?}, recv_queue: {:?}, takers_queue: {:?}, will_basket: {:?}, wait: {:?} }}" , self . lock , self . incoming_port_closed , self . outgoing_port_closed , self . recv_queue , self . takers_queue , self . will_basket , self . wait)
    }
}
pub const ractor_status_ractor_created: ractor_status = 0;
pub const ractor_status_ractor_running: ractor_status = 1;
pub const ractor_status_ractor_blocking: ractor_status = 2;
pub const ractor_status_ractor_terminated: ractor_status = 3;
pub type ractor_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_ractor_struct {
    pub pub_: rb_ractor_pub,
    pub sync: rb_ractor_sync,
    pub receiving_mutex: VALUE,
    pub barrier_wait_cond: rb_nativethread_cond_t,
    pub threads: rb_ractor_struct__bindgen_ty_1,
    pub thgroup_default: VALUE,
    pub name: VALUE,
    pub loc: VALUE,
    pub status_: ractor_status,
    pub vmlr_node: ccan_list_node,
    pub local_storage: *mut st_table,
    pub idkey_local_storage: *mut rb_id_table,
    pub local_storage_store_lock: VALUE,
    pub r_stdin: VALUE,
    pub r_stdout: VALUE,
    pub r_stderr: VALUE,
    pub verbose: VALUE,
    pub debug: VALUE,
    pub newobj_cache: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_ractor_struct__bindgen_ty_1 {
    pub set: ccan_list_head,
    pub cnt: ::std::os::raw::c_uint,
    pub blocking_cnt: ::std::os::raw::c_uint,
    pub sleeper: ::std::os::raw::c_uint,
    pub sched: rb_thread_sched,
    pub running_ec: *mut rb_execution_context_t,
    pub main: *mut rb_thread_t,
}
impl ::std::fmt::Debug for rb_ractor_struct__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_ractor_struct__bindgen_ty_1 {{ set: {:?}, cnt: {:?}, blocking_cnt: {:?}, sleeper: {:?}, sched: {:?}, running_ec: {:?}, main: {:?} }}" , self . set , self . cnt , self . blocking_cnt , self . sleeper , self . sched , self . running_ec , self . main)
    }
}
impl ::std::fmt::Debug for rb_ractor_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_ractor_struct {{ pub: {:?}, sync: {:?}, receiving_mutex: {:?}, barrier_wait_cond: {:?}, threads: {:?}, thgroup_default: {:?}, name: {:?}, loc: {:?}, status_: {:?}, vmlr_node: {:?}, local_storage: {:?}, idkey_local_storage: {:?}, local_storage_store_lock: {:?}, r_stdin: {:?}, r_stdout: {:?}, r_stderr: {:?}, verbose: {:?}, debug: {:?}, newobj_cache: {:?} }}" , self . pub_ , self . sync , self . receiving_mutex , self . barrier_wait_cond , self . threads , self . thgroup_default , self . name , self . loc , self . status_ , self . vmlr_node , self . local_storage , self . idkey_local_storage , self . local_storage_store_lock , self . r_stdin , self . r_stdout , self . r_stderr , self . verbose , self . debug , self . newobj_cache)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_compile_data {
    pub err_info: VALUE,
    pub catch_table_ary: VALUE,
    pub start_label: *mut iseq_label_data,
    pub end_label: *mut iseq_label_data,
    pub redo_label: *mut iseq_label_data,
    pub current_block: *const rb_iseq_t,
    pub ensure_node_stack: *mut iseq_compile_data_ensure_node_stack,
    pub node: iseq_compile_data__bindgen_ty_1,
    pub insn: iseq_compile_data__bindgen_ty_2,
    pub in_rescue: bool,
    pub loopval_popped: ::std::os::raw::c_int,
    pub last_line: ::std::os::raw::c_int,
    pub label_no: ::std::os::raw::c_int,
    pub node_level: ::std::os::raw::c_int,
    pub isolated_depth: ::std::os::raw::c_int,
    pub ci_index: ::std::os::raw::c_uint,
    pub ic_index: ::std::os::raw::c_uint,
    pub option: *const rb_compile_option_t,
    pub ivar_cache_table: *mut rb_id_table,
    pub builtin_function_table: *const rb_builtin_function,
    pub root_node: *const NODE,
    pub catch_except_p: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_compile_data__bindgen_ty_1 {
    pub storage_head: *mut iseq_compile_data_storage,
    pub storage_current: *mut iseq_compile_data_storage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_compile_data__bindgen_ty_2 {
    pub storage_head: *mut iseq_compile_data_storage,
    pub storage_current: *mut iseq_compile_data_storage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_compile_option_struct {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub debug_level: ::std::os::raw::c_int,
}
impl rb_compile_option_struct {
    #[inline]
    pub fn inline_const_cache(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inline_const_cache(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inline_const_cache_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_inline_const_cache_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn peephole_optimization(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_peephole_optimization(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn peephole_optimization_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_peephole_optimization_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tailcall_optimization(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tailcall_optimization(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tailcall_optimization_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tailcall_optimization_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn specialized_instruction(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_specialized_instruction(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn specialized_instruction_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_specialized_instruction_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn operands_unification(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_operands_unification(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn operands_unification_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_operands_unification_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn instructions_unification(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_instructions_unification(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instructions_unification_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instructions_unification_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frozen_string_literal(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frozen_string_literal(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frozen_string_literal_raw(this: *const Self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frozen_string_literal_raw(this: *mut Self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn debug_frozen_string_literal(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_debug_frozen_string_literal(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn debug_frozen_string_literal_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_debug_frozen_string_literal_raw(
        this: *mut Self,
        val: ::std::os::raw::c_uint,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn coverage_enabled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_coverage_enabled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn coverage_enabled_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_coverage_enabled_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        inline_const_cache: ::std::os::raw::c_uint,
        peephole_optimization: ::std::os::raw::c_uint,
        tailcall_optimization: ::std::os::raw::c_uint,
        specialized_instruction: ::std::os::raw::c_uint,
        operands_unification: ::std::os::raw::c_uint,
        instructions_unification: ::std::os::raw::c_uint,
        frozen_string_literal: ::std::os::raw::c_int,
        debug_frozen_string_literal: ::std::os::raw::c_uint,
        coverage_enabled: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let inline_const_cache: u32 = unsafe { ::std::mem::transmute(inline_const_cache) };
            inline_const_cache as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let peephole_optimization: u32 =
                unsafe { ::std::mem::transmute(peephole_optimization) };
            peephole_optimization as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tailcall_optimization: u32 =
                unsafe { ::std::mem::transmute(tailcall_optimization) };
            tailcall_optimization as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let specialized_instruction: u32 =
                unsafe { ::std::mem::transmute(specialized_instruction) };
            specialized_instruction as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let operands_unification: u32 = unsafe { ::std::mem::transmute(operands_unification) };
            operands_unification as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let instructions_unification: u32 =
                unsafe { ::std::mem::transmute(instructions_unification) };
            instructions_unification as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let frozen_string_literal: u32 =
                unsafe { ::std::mem::transmute(frozen_string_literal) };
            frozen_string_literal as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let debug_frozen_string_literal: u32 =
                unsafe { ::std::mem::transmute(debug_frozen_string_literal) };
            debug_frozen_string_literal as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let coverage_enabled: u32 = unsafe { ::std::mem::transmute(coverage_enabled) };
            coverage_enabled as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_insn_info_entry {
    pub line_no: ::std::os::raw::c_int,
    pub node_id: ::std::os::raw::c_int,
    pub events: rb_event_flag_t,
}
pub const rb_catch_type_CATCH_TYPE_RESCUE: rb_catch_type = 3;
pub const rb_catch_type_CATCH_TYPE_ENSURE: rb_catch_type = 5;
pub const rb_catch_type_CATCH_TYPE_RETRY: rb_catch_type = 7;
pub const rb_catch_type_CATCH_TYPE_BREAK: rb_catch_type = 9;
pub const rb_catch_type_CATCH_TYPE_REDO: rb_catch_type = 11;
pub const rb_catch_type_CATCH_TYPE_NEXT: rb_catch_type = 13;
pub type rb_catch_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_catch_table_entry {
    pub type_: rb_catch_type,
    pub iseq: *mut rb_iseq_t,
    pub start: ::std::os::raw::c_uint,
    pub end: ::std::os::raw::c_uint,
    pub cont: ::std::os::raw::c_uint,
    pub sp: ::std::os::raw::c_uint,
}
#[repr(C, packed)]
pub struct iseq_catch_table {
    pub size: ::std::os::raw::c_uint,
    pub entries: __IncompleteArrayField<iseq_catch_table_entry>,
}
#[repr(C)]
#[derive(Debug)]
pub struct iseq_compile_data_storage {
    pub next: *mut iseq_compile_data_storage,
    pub pos: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub buff: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct coroutine_context {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_call_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct succ_index_table {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_event_hook_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_postponed_job_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_label_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_compile_data_ensure_node_stack {
    pub _address: u8,
}
